// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Edge extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Edge getRootAsEdge(ByteBuffer _bb) { return getRootAsEdge(_bb, new Edge()); }
  public static Edge getRootAsEdge(ByteBuffer _bb, Edge obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Edge __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int time() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int feedIdWithTimezone() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int routeType() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int platformDescriptor() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int stopSequence() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int tripDescriptor() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int validity() { int o = __offset(18); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean transfer() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createEdge(FlatBufferBuilder builder,
      int type,
      int time,
      int feed_id_with_timezone,
      int route_type,
      int platform_descriptor,
      int stop_sequence,
      int trip_descriptor,
      int validity,
      boolean transfer) {
    builder.startTable(9);
    Edge.addTripDescriptor(builder, trip_descriptor);
    Edge.addPlatformDescriptor(builder, platform_descriptor);
    Edge.addTime(builder, time);
    Edge.addValidity(builder, validity);
    Edge.addTransfer(builder, transfer);
    Edge.addStopSequence(builder, stop_sequence);
    Edge.addRouteType(builder, route_type);
    Edge.addFeedIdWithTimezone(builder, feed_id_with_timezone);
    Edge.addType(builder, type);
    return Edge.endEdge(builder);
  }

  public static void startEdge(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(0, (byte)type, (byte)0); }
  public static void addTime(FlatBufferBuilder builder, int time) { builder.addInt(1, time, 0); }
  public static void addFeedIdWithTimezone(FlatBufferBuilder builder, int feedIdWithTimezone) { builder.addByte(2, (byte)feedIdWithTimezone, (byte)0); }
  public static void addRouteType(FlatBufferBuilder builder, int routeType) { builder.addByte(3, (byte)routeType, (byte)0); }
  public static void addPlatformDescriptor(FlatBufferBuilder builder, int platformDescriptor) { builder.addInt(4, platformDescriptor, 0); }
  public static void addStopSequence(FlatBufferBuilder builder, int stopSequence) { builder.addByte(5, (byte)stopSequence, (byte)0); }
  public static void addTripDescriptor(FlatBufferBuilder builder, int tripDescriptor) { builder.addInt(6, tripDescriptor, 0); }
  public static void addValidity(FlatBufferBuilder builder, int validity) { builder.addShort(7, (short)validity, (short)0); }
  public static void addTransfer(FlatBufferBuilder builder, boolean transfer) { builder.addBoolean(8, transfer, false); }
  public static int endEdge(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEdgeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEdgeBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Edge get(int j) { return get(new Edge(), j); }
    public Edge get(Edge obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

