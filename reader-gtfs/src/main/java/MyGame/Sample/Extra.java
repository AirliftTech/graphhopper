// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Extra extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Extra getRootAsExtra(ByteBuffer _bb) { return getRootAsExtra(_bb, new Extra()); }
  public static Extra getRootAsExtra(ByteBuffer _bb, Extra obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Extra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Sample.Validity validities(int j) { return validities(new MyGame.Sample.Validity(), j); }
  public MyGame.Sample.Validity validities(MyGame.Sample.Validity obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int validitiesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Sample.Validity.Vector validitiesVector() { return validitiesVector(new MyGame.Sample.Validity.Vector()); }
  public MyGame.Sample.Validity.Vector validitiesVector(MyGame.Sample.Validity.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public MyGame.Sample.FeedIdWithTimezone feedIdWithTimezones(int j) { return feedIdWithTimezones(new MyGame.Sample.FeedIdWithTimezone(), j); }
  public MyGame.Sample.FeedIdWithTimezone feedIdWithTimezones(MyGame.Sample.FeedIdWithTimezone obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int feedIdWithTimezonesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Sample.FeedIdWithTimezone.Vector feedIdWithTimezonesVector() { return feedIdWithTimezonesVector(new MyGame.Sample.FeedIdWithTimezone.Vector()); }
  public MyGame.Sample.FeedIdWithTimezone.Vector feedIdWithTimezonesVector(MyGame.Sample.FeedIdWithTimezone.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public MyGame.Sample.PlatformDescriptor platformDescriptors(int j) { return platformDescriptors(new MyGame.Sample.PlatformDescriptor(), j); }
  public MyGame.Sample.PlatformDescriptor platformDescriptors(MyGame.Sample.PlatformDescriptor obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int platformDescriptorsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Sample.PlatformDescriptor.Vector platformDescriptorsVector() { return platformDescriptorsVector(new MyGame.Sample.PlatformDescriptor.Vector()); }
  public MyGame.Sample.PlatformDescriptor.Vector platformDescriptorsVector(MyGame.Sample.PlatformDescriptor.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public MyGame.Sample.TripDescriptor tripDescriptors(int j) { return tripDescriptors(new MyGame.Sample.TripDescriptor(), j); }
  public MyGame.Sample.TripDescriptor tripDescriptors(MyGame.Sample.TripDescriptor obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tripDescriptorsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Sample.TripDescriptor.Vector tripDescriptorsVector() { return tripDescriptorsVector(new MyGame.Sample.TripDescriptor.Vector()); }
  public MyGame.Sample.TripDescriptor.Vector tripDescriptorsVector(MyGame.Sample.TripDescriptor.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createExtra(FlatBufferBuilder builder,
      int validitiesOffset,
      int feed_id_with_timezonesOffset,
      int platform_descriptorsOffset,
      int trip_descriptorsOffset) {
    builder.startTable(4);
    Extra.addTripDescriptors(builder, trip_descriptorsOffset);
    Extra.addPlatformDescriptors(builder, platform_descriptorsOffset);
    Extra.addFeedIdWithTimezones(builder, feed_id_with_timezonesOffset);
    Extra.addValidities(builder, validitiesOffset);
    return Extra.endExtra(builder);
  }

  public static void startExtra(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addValidities(FlatBufferBuilder builder, int validitiesOffset) { builder.addOffset(0, validitiesOffset, 0); }
  public static int createValiditiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValiditiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFeedIdWithTimezones(FlatBufferBuilder builder, int feedIdWithTimezonesOffset) { builder.addOffset(1, feedIdWithTimezonesOffset, 0); }
  public static int createFeedIdWithTimezonesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFeedIdWithTimezonesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPlatformDescriptors(FlatBufferBuilder builder, int platformDescriptorsOffset) { builder.addOffset(2, platformDescriptorsOffset, 0); }
  public static int createPlatformDescriptorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlatformDescriptorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTripDescriptors(FlatBufferBuilder builder, int tripDescriptorsOffset) { builder.addOffset(3, tripDescriptorsOffset, 0); }
  public static int createTripDescriptorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTripDescriptorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endExtra(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishExtraBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedExtraBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Extra get(int j) { return get(new Extra(), j); }
    public Extra get(Extra obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

