// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FeedIdWithTimezone extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FeedIdWithTimezone getRootAsFeedIdWithTimezone(ByteBuffer _bb) { return getRootAsFeedIdWithTimezone(_bb, new FeedIdWithTimezone()); }
  public static FeedIdWithTimezone getRootAsFeedIdWithTimezone(ByteBuffer _bb, FeedIdWithTimezone obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FeedIdWithTimezone __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String feedId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer feedIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer feedIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String zoneId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer zoneIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createFeedIdWithTimezone(FlatBufferBuilder builder,
      int feed_idOffset,
      int zone_idOffset) {
    builder.startTable(2);
    FeedIdWithTimezone.addZoneId(builder, zone_idOffset);
    FeedIdWithTimezone.addFeedId(builder, feed_idOffset);
    return FeedIdWithTimezone.endFeedIdWithTimezone(builder);
  }

  public static void startFeedIdWithTimezone(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFeedId(FlatBufferBuilder builder, int feedIdOffset) { builder.addOffset(0, feedIdOffset, 0); }
  public static void addZoneId(FlatBufferBuilder builder, int zoneIdOffset) { builder.addOffset(1, zoneIdOffset, 0); }
  public static int endFeedIdWithTimezone(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FeedIdWithTimezone get(int j) { return get(new FeedIdWithTimezone(), j); }
    public FeedIdWithTimezone get(FeedIdWithTimezone obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

