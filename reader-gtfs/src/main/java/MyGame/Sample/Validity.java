// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Validity extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Validity getRootAsValidity(ByteBuffer _bb) { return getRootAsValidity(_bb, new Validity()); }
  public static Validity getRootAsValidity(ByteBuffer _bb, Validity obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Validity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int bitSet(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bitSetLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bitSetVector() { return bitSetVector(new ByteVector()); }
  public ByteVector bitSetVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bitSetAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer bitSetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long start() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String zoneId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer zoneIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createValidity(FlatBufferBuilder builder,
      int bit_setOffset,
      long start,
      int zone_idOffset) {
    builder.startTable(3);
    Validity.addStart(builder, start);
    Validity.addZoneId(builder, zone_idOffset);
    Validity.addBitSet(builder, bit_setOffset);
    return Validity.endValidity(builder);
  }

  public static void startValidity(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addBitSet(FlatBufferBuilder builder, int bitSetOffset) { builder.addOffset(0, bitSetOffset, 0); }
  public static int createBitSetVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBitSetVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBitSetVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addStart(FlatBufferBuilder builder, long start) { builder.addLong(1, start, 0L); }
  public static void addZoneId(FlatBufferBuilder builder, int zoneIdOffset) { builder.addOffset(2, zoneIdOffset, 0); }
  public static int endValidity(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Validity get(int j) { return get(new Validity(), j); }
    public Validity get(Validity obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

